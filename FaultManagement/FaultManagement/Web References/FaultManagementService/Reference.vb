'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
'
Namespace FaultManagementService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="FaultManagementServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class FaultManagementService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetAlarmByServerNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendImAliveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendCPUInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendRAMInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendDriveInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendServiceInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendProcessInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFileSizeInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendFileLostInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendWebAppInfoToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWindowsServiceCheckListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWindowsProcessCheckListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigFileSizeListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConfigFileLostListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTEMP_FILEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLoadTempPathOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendTempFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FaultManagement.My.MySettings.Default.FaultManagement_FaultManagementService_FaultManagementService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetAlarmByServerNameCompleted As GetAlarmByServerNameCompletedEventHandler
        
        '''<remarks/>
        Public Event SendImAliveCompleted As SendImAliveCompletedEventHandler
        
        '''<remarks/>
        Public Event SendCPUInfoToDCCompleted As SendCPUInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendRAMInfoToDCCompleted As SendRAMInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendDriveInfoToDCCompleted As SendDriveInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendServiceInfoToDCCompleted As SendServiceInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendProcessInfoToDCCompleted As SendProcessInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFileSizeInfoToDCCompleted As SendFileSizeInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendFileLostInfoToDCCompleted As SendFileLostInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendWebAppInfoToDCCompleted As SendWebAppInfoToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWindowsServiceCheckListCompleted As GetWindowsServiceCheckListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWindowsProcessCheckListCompleted As GetWindowsProcessCheckListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigFileSizeListCompleted As GetConfigFileSizeListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConfigFileLostListCompleted As GetConfigFileLostListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTEMP_FILECompleted As GetTEMP_FILECompletedEventHandler
        
        '''<remarks/>
        Public Event GetLoadTempPathCompleted As GetLoadTempPathCompletedEventHandler
        
        '''<remarks/>
        Public Event SendTempFileCompleted As SendTempFileCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlarmByServerName", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlarmByServerName(ByVal ServerName As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetAlarmByServerName", New Object() {ServerName})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlarmByServerNameAsync(ByVal ServerName As String)
            Me.GetAlarmByServerNameAsync(ServerName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlarmByServerNameAsync(ByVal ServerName As String, ByVal userState As Object)
            If (Me.GetAlarmByServerNameOperationCompleted Is Nothing) Then
                Me.GetAlarmByServerNameOperationCompleted = AddressOf Me.OnGetAlarmByServerNameOperationCompleted
            End If
            Me.InvokeAsync("GetAlarmByServerName", New Object() {ServerName}, Me.GetAlarmByServerNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlarmByServerNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlarmByServerNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlarmByServerNameCompleted(Me, New GetAlarmByServerNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendImAlive", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendImAlive(ByVal ServerName As String, ByVal ServerIP As String, ByVal MacAddress As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date) As Boolean
            Dim results() As Object = Me.Invoke("SendImAlive", New Object() {ServerName, ServerIP, MacAddress, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendImAliveAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal MacAddress As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date)
            Me.SendImAliveAsync(ServerName, ServerIP, MacAddress, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendImAliveAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal MacAddress As String, ByVal cfgIntervalMinute As Integer, ByVal cfgStartTime As String, ByVal cfgEndTime As String, ByVal AliveTime As Date, ByVal userState As Object)
            If (Me.SendImAliveOperationCompleted Is Nothing) Then
                Me.SendImAliveOperationCompleted = AddressOf Me.OnSendImAliveOperationCompleted
            End If
            Me.InvokeAsync("SendImAlive", New Object() {ServerName, ServerIP, MacAddress, cfgIntervalMinute, cfgStartTime, cfgEndTime, AliveTime}, Me.SendImAliveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendImAliveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendImAliveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendImAliveCompleted(Me, New SendImAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendCPUInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendCPUInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal CPUPercentage As Double, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendCPUInfoToDC", New Object() {ServerName, ServerIP, CPUPercentage, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendCPUInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal CPUPercentage As Double, ByVal MacAddress As String)
            Me.SendCPUInfoToDCAsync(ServerName, ServerIP, CPUPercentage, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendCPUInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal CPUPercentage As Double, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendCPUInfoToDCOperationCompleted Is Nothing) Then
                Me.SendCPUInfoToDCOperationCompleted = AddressOf Me.OnSendCPUInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendCPUInfoToDC", New Object() {ServerName, ServerIP, CPUPercentage, MacAddress}, Me.SendCPUInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendCPUInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendCPUInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendCPUInfoToDCCompleted(Me, New SendCPUInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendRAMInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendRAMInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal RAMPercentage As Double, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendRAMInfoToDC", New Object() {ServerName, ServerIP, RAMPercentage, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendRAMInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal RAMPercentage As Double, ByVal MacAddress As String)
            Me.SendRAMInfoToDCAsync(ServerName, ServerIP, RAMPercentage, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendRAMInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal RAMPercentage As Double, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendRAMInfoToDCOperationCompleted Is Nothing) Then
                Me.SendRAMInfoToDCOperationCompleted = AddressOf Me.OnSendRAMInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendRAMInfoToDC", New Object() {ServerName, ServerIP, RAMPercentage, MacAddress}, Me.SendRAMInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendRAMInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendRAMInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendRAMInfoToDCCompleted(Me, New SendRAMInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendDriveInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendDriveInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal DriveInfo As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendDriveInfoToDC", New Object() {ServerName, ServerIP, DriveInfo, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendDriveInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal DriveInfo As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendDriveInfoToDCAsync(ServerName, ServerIP, DriveInfo, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendDriveInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal DriveInfo As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendDriveInfoToDCOperationCompleted Is Nothing) Then
                Me.SendDriveInfoToDCOperationCompleted = AddressOf Me.OnSendDriveInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendDriveInfoToDC", New Object() {ServerName, ServerIP, DriveInfo, MacAddress}, Me.SendDriveInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendDriveInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendDriveInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendDriveInfoToDCCompleted(Me, New SendDriveInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendServiceInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendServiceInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal ServiceDT As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendServiceInfoToDC", New Object() {ServerName, ServerIP, ServiceDT, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendServiceInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal ServiceDT As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendServiceInfoToDCAsync(ServerName, ServerIP, ServiceDT, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendServiceInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal ServiceDT As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendServiceInfoToDCOperationCompleted Is Nothing) Then
                Me.SendServiceInfoToDCOperationCompleted = AddressOf Me.OnSendServiceInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendServiceInfoToDC", New Object() {ServerName, ServerIP, ServiceDT, MacAddress}, Me.SendServiceInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendServiceInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendServiceInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendServiceInfoToDCCompleted(Me, New SendServiceInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendProcessInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendProcessInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal ProcessDT As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendProcessInfoToDC", New Object() {ServerName, ServerIP, ProcessDT, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendProcessInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal ProcessDT As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendProcessInfoToDCAsync(ServerName, ServerIP, ProcessDT, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendProcessInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal ProcessDT As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendProcessInfoToDCOperationCompleted Is Nothing) Then
                Me.SendProcessInfoToDCOperationCompleted = AddressOf Me.OnSendProcessInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendProcessInfoToDC", New Object() {ServerName, ServerIP, ProcessDT, MacAddress}, Me.SendProcessInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendProcessInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendProcessInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendProcessInfoToDCCompleted(Me, New SendProcessInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendFileSizeInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFileSizeInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileSizeDT As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendFileSizeInfoToDC", New Object() {ServerName, ServerIP, FileSizeDT, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileSizeInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileSizeDT As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendFileSizeInfoToDCAsync(ServerName, ServerIP, FileSizeDT, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileSizeInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileSizeDT As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendFileSizeInfoToDCOperationCompleted Is Nothing) Then
                Me.SendFileSizeInfoToDCOperationCompleted = AddressOf Me.OnSendFileSizeInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendFileSizeInfoToDC", New Object() {ServerName, ServerIP, FileSizeDT, MacAddress}, Me.SendFileSizeInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileSizeInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileSizeInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileSizeInfoToDCCompleted(Me, New SendFileSizeInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendFileLostInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFileLostInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileLostDT As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendFileLostInfoToDC", New Object() {ServerName, ServerIP, FileLostDT, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileLostInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileLostDT As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendFileLostInfoToDCAsync(ServerName, ServerIP, FileLostDT, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileLostInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal FileLostDT As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendFileLostInfoToDCOperationCompleted Is Nothing) Then
                Me.SendFileLostInfoToDCOperationCompleted = AddressOf Me.OnSendFileLostInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendFileLostInfoToDC", New Object() {ServerName, ServerIP, FileLostDT, MacAddress}, Me.SendFileLostInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileLostInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileLostInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileLostInfoToDCCompleted(Me, New SendFileLostInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendWebAppInfoToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendWebAppInfoToDC(ByVal ServerName As String, ByVal ServerIP As String, ByVal WebAppDT As System.Data.DataTable, ByVal MacAddress As String) As Boolean
            Dim results() As Object = Me.Invoke("SendWebAppInfoToDC", New Object() {ServerName, ServerIP, WebAppDT, MacAddress})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendWebAppInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal WebAppDT As System.Data.DataTable, ByVal MacAddress As String)
            Me.SendWebAppInfoToDCAsync(ServerName, ServerIP, WebAppDT, MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendWebAppInfoToDCAsync(ByVal ServerName As String, ByVal ServerIP As String, ByVal WebAppDT As System.Data.DataTable, ByVal MacAddress As String, ByVal userState As Object)
            If (Me.SendWebAppInfoToDCOperationCompleted Is Nothing) Then
                Me.SendWebAppInfoToDCOperationCompleted = AddressOf Me.OnSendWebAppInfoToDCOperationCompleted
            End If
            Me.InvokeAsync("SendWebAppInfoToDC", New Object() {ServerName, ServerIP, WebAppDT, MacAddress}, Me.SendWebAppInfoToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendWebAppInfoToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendWebAppInfoToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendWebAppInfoToDCCompleted(Me, New SendWebAppInfoToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWindowsServiceCheckList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWindowsServiceCheckList(ByVal MacAddress As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetWindowsServiceCheckList", New Object() {MacAddress})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWindowsServiceCheckListAsync(ByVal MacAddress As String)
            Me.GetWindowsServiceCheckListAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWindowsServiceCheckListAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetWindowsServiceCheckListOperationCompleted Is Nothing) Then
                Me.GetWindowsServiceCheckListOperationCompleted = AddressOf Me.OnGetWindowsServiceCheckListOperationCompleted
            End If
            Me.InvokeAsync("GetWindowsServiceCheckList", New Object() {MacAddress}, Me.GetWindowsServiceCheckListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWindowsServiceCheckListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWindowsServiceCheckListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWindowsServiceCheckListCompleted(Me, New GetWindowsServiceCheckListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWindowsProcessCheckList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWindowsProcessCheckList(ByVal MacAddress As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetWindowsProcessCheckList", New Object() {MacAddress})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWindowsProcessCheckListAsync(ByVal MacAddress As String)
            Me.GetWindowsProcessCheckListAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWindowsProcessCheckListAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetWindowsProcessCheckListOperationCompleted Is Nothing) Then
                Me.GetWindowsProcessCheckListOperationCompleted = AddressOf Me.OnGetWindowsProcessCheckListOperationCompleted
            End If
            Me.InvokeAsync("GetWindowsProcessCheckList", New Object() {MacAddress}, Me.GetWindowsProcessCheckListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWindowsProcessCheckListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWindowsProcessCheckListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWindowsProcessCheckListCompleted(Me, New GetWindowsProcessCheckListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigFileSizeList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigFileSizeList(ByVal MacAddress As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetConfigFileSizeList", New Object() {MacAddress})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigFileSizeListAsync(ByVal MacAddress As String)
            Me.GetConfigFileSizeListAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigFileSizeListAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetConfigFileSizeListOperationCompleted Is Nothing) Then
                Me.GetConfigFileSizeListOperationCompleted = AddressOf Me.OnGetConfigFileSizeListOperationCompleted
            End If
            Me.InvokeAsync("GetConfigFileSizeList", New Object() {MacAddress}, Me.GetConfigFileSizeListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigFileSizeListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigFileSizeListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigFileSizeListCompleted(Me, New GetConfigFileSizeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigFileLostList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConfigFileLostList(ByVal MacAddress As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetConfigFileLostList", New Object() {MacAddress})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConfigFileLostListAsync(ByVal MacAddress As String)
            Me.GetConfigFileLostListAsync(MacAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConfigFileLostListAsync(ByVal MacAddress As String, ByVal userState As Object)
            If (Me.GetConfigFileLostListOperationCompleted Is Nothing) Then
                Me.GetConfigFileLostListOperationCompleted = AddressOf Me.OnGetConfigFileLostListOperationCompleted
            End If
            Me.InvokeAsync("GetConfigFileLostList", New Object() {MacAddress}, Me.GetConfigFileLostListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConfigFileLostListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConfigFileLostListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConfigFileLostListCompleted(Me, New GetConfigFileLostListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTEMP_FILE", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTEMP_FILE(ByVal serverip As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetTEMP_FILE", New Object() {serverip})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTEMP_FILEAsync(ByVal serverip As String)
            Me.GetTEMP_FILEAsync(serverip, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTEMP_FILEAsync(ByVal serverip As String, ByVal userState As Object)
            If (Me.GetTEMP_FILEOperationCompleted Is Nothing) Then
                Me.GetTEMP_FILEOperationCompleted = AddressOf Me.OnGetTEMP_FILEOperationCompleted
            End If
            Me.InvokeAsync("GetTEMP_FILE", New Object() {serverip}, Me.GetTEMP_FILEOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTEMP_FILEOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTEMP_FILECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTEMP_FILECompleted(Me, New GetTEMP_FILECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLoadTempPath", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLoadTempPath(ByVal ServerIP As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetLoadTempPath", New Object() {ServerIP})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLoadTempPathAsync(ByVal ServerIP As String)
            Me.GetLoadTempPathAsync(ServerIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLoadTempPathAsync(ByVal ServerIP As String, ByVal userState As Object)
            If (Me.GetLoadTempPathOperationCompleted Is Nothing) Then
                Me.GetLoadTempPathOperationCompleted = AddressOf Me.OnGetLoadTempPathOperationCompleted
            End If
            Me.InvokeAsync("GetLoadTempPath", New Object() {ServerIP}, Me.GetLoadTempPathOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLoadTempPathOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLoadTempPathCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLoadTempPathCompleted(Me, New GetLoadTempPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendTempFile", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendTempFile(ByVal _dt As System.Data.DataTable, ByVal LoadTempPathID As String) As Boolean
            Dim results() As Object = Me.Invoke("SendTempFile", New Object() {_dt, LoadTempPathID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendTempFileAsync(ByVal _dt As System.Data.DataTable, ByVal LoadTempPathID As String)
            Me.SendTempFileAsync(_dt, LoadTempPathID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendTempFileAsync(ByVal _dt As System.Data.DataTable, ByVal LoadTempPathID As String, ByVal userState As Object)
            If (Me.SendTempFileOperationCompleted Is Nothing) Then
                Me.SendTempFileOperationCompleted = AddressOf Me.OnSendTempFileOperationCompleted
            End If
            Me.InvokeAsync("SendTempFile", New Object() {_dt, LoadTempPathID}, Me.SendTempFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendTempFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendTempFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendTempFileCompleted(Me, New SendTempFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetAlarmByServerNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlarmByServerNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlarmByServerNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendImAliveCompletedEventHandler(ByVal sender As Object, ByVal e As SendImAliveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendImAliveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendCPUInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendCPUInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendCPUInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendRAMInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendRAMInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendRAMInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendDriveInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendDriveInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendDriveInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendServiceInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendServiceInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendServiceInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendProcessInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendProcessInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendProcessInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendFileSizeInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendFileSizeInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileSizeInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendFileLostInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendFileLostInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileLostInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendWebAppInfoToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendWebAppInfoToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendWebAppInfoToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetWindowsServiceCheckListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWindowsServiceCheckListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWindowsServiceCheckListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetWindowsProcessCheckListCompletedEventHandler(ByVal sender As Object, ByVal e As GetWindowsProcessCheckListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWindowsProcessCheckListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetConfigFileSizeListCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigFileSizeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigFileSizeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetConfigFileLostListCompletedEventHandler(ByVal sender As Object, ByVal e As GetConfigFileLostListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConfigFileLostListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetTEMP_FILECompletedEventHandler(ByVal sender As Object, ByVal e As GetTEMP_FILECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTEMP_FILECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub GetLoadTempPathCompletedEventHandler(ByVal sender As Object, ByVal e As GetLoadTempPathCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLoadTempPathCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub SendTempFileCompletedEventHandler(ByVal sender As Object, ByVal e As SendTempFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendTempFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
